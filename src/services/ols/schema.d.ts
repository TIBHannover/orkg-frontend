/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/api/rest/statistics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** REST Calls List */
        post: operations['getList'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/rest/statistics/count': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** REST Calls total count */
        post: operations['getTotalCount'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/rest/statistics/byUrl': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** REST Calls statistics by URL */
        post: operations['getStatisticsByUrl'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/rest/statistics/byParameter': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** REST Calls statistics by query parameters and path variables */
        post: operations['getStatisticsByParameter'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/rest/statistics/byDate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** REST Calls statistics by date */
        post: operations['getStatisticsByDate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/statsby': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Schema and Classification based Statistics. Possible schema keys and possible classification values of particular keys can be inquired with /api/ontologies/schemakeys and /api/ontologies/schemavalues methods respectively. */
        get: operations['getStatistics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/stats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Whole System Statistics. Components in all ontologies are taken into consideration */
        get: operations['getStatistics_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/properties': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getProperties'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getOntologies'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/{iri}/tree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get partial SKOS concept hierarchy based on the encoded iri of the designated top concept */
        get: operations['getSKOSConceptHierarchyByOntologyAndIri'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/{iri}/relations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are listed in JSON if the concept iri is provided in encoded format. */
        get: operations['findRelatedConcepts'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/{iri}/indirectrelations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are listed in JSON if the concept iri is provided in encoded format. The relationship is identified indirectly based on the related concept's relation to the concept in question. This requires traversing all the available concepts and checking if they are related to the concept in question. For this reason, this method is relatively slower than the displayconceptrelations method. Nevertheless, it enables to identify unforeseen relations of the concept in question */
        get: operations['findRelatedConceptsIndirectly'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/{iri}/graph': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Node and Edge definitions needed to visualize the nodes that are directly related with the subject term. Ontology ID and encoded iri are required.  */
        get: operations['retrieveImmediateGraph'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/{iri}/displaytree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Display partial SKOS concept hierarchy based on the encoded iri of the designated top concept */
        get: operations['displaySKOSConceptHierarchyByOntologyAndIri'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/{iri}/displayrelations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are displayed as text if the concept iri is provided in encoded format. */
        get: operations['displayRelatedConcepts'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/{iri}/displayindirectrelations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are listed in JSON if the concept iri is provided in encoded format. The relationship is identified indirectly based on the related concept's relation to the concept in question. This requires traversing all the available concepts and checking if they are related to the concept in question. For this reason, this method is relatively slower than the displayconceptrelations method. Nevertheless, it enables to identify unforeseen relations of the concept in question */
        get: operations['displayRelatedConceptsIndirectly'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/tree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get complete SKOS concept hierarchy or only top concepts based on alternative top concept identification methods and concept relations. If only top concepts are identified, they can be used to extract the following levels of the concept tree one by one using the /{onto}/conceptrelations/{iri} method with broader or narrower concept relations. */
        get: operations['getSKOSConceptHierarchyByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/skos/displaytree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Display complete SKOS concept hierarchy or only top concepts based on alternative top concept identification methods and concept relations. If only top concepts are identified, they can be used to extract the following levels of the concept tree one by one using the /{onto}/displayconceptrelations/{iri} method with broader or narrower concept relations. */
        get: operations['displaySKOSConceptHierarchyByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/properties': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getProperties_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/properties/{property}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getProperty'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/properties/{property}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getChildrenByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/properties/{property}/ancestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAncestorsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/individuals': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getIndividuals'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/individuals/{individual}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getIndividual'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/individuals/{individual}/ancestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getIndividualAncestorsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/entities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTerms'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/entities/{entity}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getEntity'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/classes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getClasses'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/classes/{class}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getClass'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/classes/{class}/individuals': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getClassIndividuals'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/classes/{class}/hierarchicalChildren': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getHierarchicalChildrenByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/classes/{class}/hierarchicalAncestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getHierarchicalAncestorsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/classes/{class}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getChildrenByOntology_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/{onto}/classes/{class}/ancestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAncestorsByOntology_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/schemavalues': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['filterValues'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/ontologies/schemakeys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['filterKeys'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/individuals': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getIndividuals_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/entities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getEntities'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/classes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getClasses_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/v2/allstatsbyschema': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Composite Schema based Statistics. All schemas with their respective classifications under the classifications variable will be computed. */
        get: operations['getStatisticsBySchema'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/unavailable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getApiReponse'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/terms': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTerms_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/terms/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTermsByIri'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/terms/findByIdAndIsDefiningOntology': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTermsByIdAndIsDefiningOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/terms/findByIdAndIsDefiningOntology/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTermsByIdAndIsDefiningOntology_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/suggest': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['suggest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/select': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['select'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/search': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['search'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/properties': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAllProperties'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/properties/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getPropertiesByIri'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/properties/findByIdAndIsDefiningOntology': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getPropertiesByIdAndIsDefiningOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/properties/findByIdAndIsDefiningOntology/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getPropertiesByIriAndIsDefiningOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getOntologies_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getOntology_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTerm'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/{property_iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['related'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/superclasses': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getSuperClasses'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/relatedfrom': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getRelatedFrom'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/parents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getParents'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/jstree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['graphJsTree'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/jstree/children/{nodeid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['graphJsTreeChildren'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/json': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getJson'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/instances': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getInstances'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/hierarchicalParents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getHierarchicalParents'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/hierarchicalDescendants': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getHierarchicalDescendants'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/hierarchicalChildren': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getHierarchicalChildren'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/hierarchicalAncestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getHierarchicalAncestors'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/graph': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['graphJson'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/equivalentclasses': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getEquivalentClasses'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/descendants': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['descendants'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['children'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/{iri}/ancestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ancestors'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/roots': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getRoots'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/terms/preferredRoots': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getPreferredRoots'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/{iri}/tree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get partial SKOS concept hierarchy based on the encoded iri of the designated top concept */
        get: operations['getSKOSConceptHierarchyByOntologyAndIri_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/{iri}/relations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are listed in JSON if the concept iri is provided in encoded format. */
        get: operations['findRelatedConcepts_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/{iri}/indirectrelations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are listed in JSON if the concept iri is provided in encoded format. The relationship is identified indirectly based on the related concept's relation to the concept in question. This requires traversing all the available concepts and checking if they are related to the concept in question. For this reason, this method is relatively slower than the displayconceptrelations method. Nevertheless, it enables to identify unforeseen relations of the concept in question */
        get: operations['findRelatedConceptsIndirectly_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/{iri}/graph': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Node and Edge definitions needed to visualize the nodes that are directly related with the subject term. Ontology ID and encoded iri are required.  */
        get: operations['retrieveImmediateGraph_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/{iri}/displaytree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Display partial SKOS concept hierarchy based on the encoded iri of the designated top concept */
        get: operations['displaySKOSConceptHierarchyByOntologyAndIri_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/{iri}/displayrelations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are displayed as text if the concept iri is provided in encoded format. */
        get: operations['displayRelatedConcepts_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/{iri}/displayindirectrelations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Broader, Narrower and Related concept relations of a concept are listed in JSON if the concept iri is provided in encoded format. The relationship is identified indirectly based on the related concept's relation to the concept in question. This requires traversing all the available concepts and checking if they are related to the concept in question. For this reason, this method is relatively slower than the displayconceptrelations method. Nevertheless, it enables to identify unforeseen relations of the concept in question */
        get: operations['displayRelatedConceptsIndirectly_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/tree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get complete SKOS concept hierarchy or only top concepts based on alternative top concept identification methods and concept relations. If only top concepts are identified, they can be used to extract the following levels of the concept tree one by one using the /{onto}/conceptrelations/{iri} method with broader or narrower concept relations. */
        get: operations['getSKOSConceptHierarchyByOntology_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/skos/displaytree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Display complete SKOS concept hierarchy or only top concepts based on alternative top concept identification methods and concept relations. If only top concepts are identified, they can be used to extract the following levels of the concept tree one by one using the /{onto}/displayconceptrelations/{iri} method with broader or narrower concept relations. */
        get: operations['displaySKOSConceptHierarchyByOntology_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAllPropertiesByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getProperty_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/{iri}/parents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getParents_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/{iri}/jstree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getJsTree'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/{iri}/jstree/children/{nodeid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['graphJsTreeChildren_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/{iri}/descendants': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['descendants_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/{iri}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['children_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/{iri}/ancestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ancestors_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/properties/roots': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getRoots_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/parents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termParentsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/individuals': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAllIndividualsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/individuals/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getIndividual_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/individuals/{iri}/types': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getDirectTypes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/individuals/{iri}/jstree': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getJsTree_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/individuals/{iri}/alltypes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ancestors_2'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/hierarchicalDescendants': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termHierarchicalDescendantsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/hierarchicalChildren': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termHierarchicalChildrenByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/hierarchicalAncestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termHierarchicalAncestorsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/descendants': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termDescendantsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termChildrenByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/{onto}/ancestors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['termAncestorsByOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/schemavalues': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['filterValues_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/schemakeys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['filterKeys_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/ontologies/filterby': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getOntologiesByMetadata'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/individuals': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAllIndividuals'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/individuals/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAllIndividuals_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/individuals/findByIdAndIsDefiningOntology': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAllIndividualsByIdAndIsDefiningOntology'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/individuals/findByIdAndIsDefiningOntology/{iri}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getAllIndividualsByIdAndIsDefiningOntology_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/error': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['handleError_2'];
        put: operations['handleError_3'];
        post: operations['handleError_6'];
        delete: operations['handleError_5'];
        options: operations['handleError_1'];
        head: operations['handleError'];
        patch: operations['handleError_4'];
        trace?: never;
    };
    '/api/v2/health': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['checkHealth_2'];
        put: operations['checkHealth_3'];
        post: operations['checkHealth_6'];
        delete: operations['checkHealth_5'];
        options: operations['checkHealth_1'];
        head: operations['checkHealth'];
        patch: operations['checkHealth_4'];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RestCallParameter: {
            name?: string;
            value?: string;
            /** @enum {string} */
            parameterType?: 'PATH' | 'QUERY' | 'HEADER';
        };
        Link: {
            rel?: string;
            href?: string;
            hreflang?: string;
            media?: string;
            title?: string;
            type?: string;
            deprecation?: string;
            profile?: string;
            name?: string;
        };
        PageMetadata: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            number?: number;
        };
        PagedModelRestCallDto: {
            links?: components['schemas']['Link'][];
            content?: components['schemas']['RestCallDto'][];
            page?: components['schemas']['PageMetadata'];
        };
        RestCallDto: {
            id?: string;
            url?: string;
            parameters?: components['schemas']['RestCallParameter'][];
            /** Format: date-time */
            createdAt?: string;
        };
        KeyValueResultDto: {
            key?: string;
            /** Format: int64 */
            value?: number;
        };
        PagedModelKeyValueResultDto: {
            links?: components['schemas']['Link'][];
            content?: components['schemas']['KeyValueResultDto'][];
            page?: components['schemas']['PageMetadata'];
        };
        V2Statistics: {
            lastModified?: string;
            /** Format: int32 */
            numberOfOntologies?: number;
            /** Format: int32 */
            numberOfClasses?: number;
            /** Format: int32 */
            numberOfProperties?: number;
            /** Format: int32 */
            numberOfIndividuals?: number;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        V2Entity: Record<string, never>;
        V2PagedAndFacetedResponseV2Entity: {
            /** Format: int64 */
            page?: number;
            /** Format: int64 */
            numElements?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            elements?: components['schemas']['V2Entity'][];
            facetFieldsToCounts?: {
                [key: string]: {
                    [key: string]: number;
                };
            };
        };
        TreeNodeV2Entity: {
            children?: components['schemas']['TreeNodeV2Entity'][];
            related?: components['schemas']['TreeNodeV2Entity'][];
            parent?: components['schemas']['TreeNodeV2Entity'][];
            index?: string;
            data?: components['schemas']['V2Entity'];
            root?: boolean;
            leaf?: boolean;
        };
        PagedResourcesAssembler: {
            forceFirstAndLastRels?: boolean;
        };
        PagedModelV2Entity: {
            links?: components['schemas']['Link'][];
            content?: components['schemas']['V2Entity'][];
            page?: components['schemas']['PageMetadata'];
        };
        V2PagedResponseV2Entity: {
            /** Format: int64 */
            page?: number;
            /** Format: int64 */
            numElements?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            elements?: components['schemas']['V2Entity'][];
        };
        PageString: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            pageable?: components['schemas']['PageableObject'];
            /** Format: int32 */
            size?: number;
            content?: string[];
            /** Format: int32 */
            number?: number;
            sort?: components['schemas']['Sort'];
            /** Format: int32 */
            numberOfElements?: number;
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            offset?: number;
            sort?: components['schemas']['Sort'];
            paged?: boolean;
            unpaged?: boolean;
        };
        Sort: {
            sorted?: boolean;
            empty?: boolean;
            unsorted?: boolean;
        };
        PagedModelV1Term: {
            links?: components['schemas']['Link'][];
            content?: components['schemas']['V1Term'][];
            page?: components['schemas']['PageMetadata'];
        };
        V1OboDefinitionCitation: {
            definition?: string;
            oboXrefs?: components['schemas']['V1OboXref'][];
        };
        V1OboSynonym: {
            name?: string;
            scope?: string;
            type?: string;
            xrefs?: components['schemas']['V1OboXref'][];
        };
        V1OboXref: {
            database?: string;
            id?: string;
            description?: string;
            url?: string;
        };
        V1Term: {
            iri?: string;
            lang?: string;
            description?: string[];
            synonyms?: string[];
            annotation?: {
                [key: string]: Record<string, never>;
            };
            label?: string;
            ontology_name?: string;
            ontology_prefix?: string;
            ontology_iri?: string;
            is_obsolete?: boolean;
            term_replaced_by?: string;
            is_defining_ontology?: boolean;
            has_children?: boolean;
            is_root?: boolean;
            short_form?: string;
            obo_id?: string;
            in_subset?: string[];
            obo_definition_citation?: components['schemas']['V1OboDefinitionCitation'][];
            obo_xref?: components['schemas']['V1OboXref'][];
            obo_synonym?: components['schemas']['V1OboSynonym'][];
            is_preferred_root?: boolean;
        };
        PagedModelV1Property: {
            links?: components['schemas']['Link'][];
            content?: components['schemas']['V1Property'][];
            page?: components['schemas']['PageMetadata'];
        };
        V1Property: {
            iri?: string;
            lang?: string;
            description?: string[];
            synonyms?: string[];
            annotation?: {
                [key: string]: Record<string, never>;
            };
            label?: string;
            ontology_name?: string;
            ontology_prefix?: string;
            ontology_iri?: string;
            is_obsolete?: boolean;
            is_defining_ontology?: boolean;
            has_children?: boolean;
            is_root?: boolean;
            short_form?: string;
            obo_id?: string;
        };
        PagedModelV1Ontology: {
            links?: components['schemas']['Link'][];
            content?: components['schemas']['V1Ontology'][];
            page?: components['schemas']['PageMetadata'];
        };
        V1Ontology: {
            languages?: string[];
            lang?: string;
            ontologyId?: string;
            loaded?: string;
            updated?: string;
            status?: string;
            message?: string;
            version?: string;
            fileHash?: string;
            /** Format: int32 */
            loadAttempts?: number;
            /** Format: int32 */
            numberOfTerms?: number;
            /** Format: int32 */
            numberOfProperties?: number;
            /** Format: int32 */
            numberOfIndividuals?: number;
            config?: components['schemas']['V1OntologyConfig'];
            baseUris?: string[];
        };
        V1OntologyConfig: {
            id?: string;
            versionIri?: string;
            namespace?: string;
            preferredPrefix?: string;
            title?: string;
            description?: string;
            homepage?: string;
            version?: string;
            mailingList?: string;
            tracker?: string;
            logo?: string;
            creators?: string[];
            collection?: string[];
            subject?: string[];
            classifications?: Record<string, never>;
            repoUrl?: string;
            license?: components['schemas']['license information of the ontology'];
            annotations?: Record<string, never>;
            fileLocation?: string;
            oboSlims?: boolean;
            labelProperty?: string;
            definitionProperties?: string[];
            synonymProperties?: string[];
            hierarchicalProperties?: string[];
            baseUris?: string[];
            hiddenProperties?: string[];
            preferredRootTerms?: string[];
            isSkos?: boolean;
            skosNarrower?: boolean;
            /** @enum {string} */
            skosRoot?: 'SCHEMA' | 'TOPCONCEPTOF_PROPERTY' | 'RELATIONSHIPS';
            allowDownload?: boolean;
        };
        'license information of the ontology': {
            /** @example http://creativecommons.org/licenses/by/4.0/ */
            'URL of the license'?: string;
            /** @example http://mirrors.creativecommons.org/presskit/buttons/80x15/png/by.png */
            'Logo of the license'?: string;
            /** @example CC-BY */
            'Label of the license'?: string;
        };
        EntityModelV1Ontology: {
            languages?: string[];
            lang?: string;
            ontologyId?: string;
            loaded?: string;
            updated?: string;
            status?: string;
            message?: string;
            version?: string;
            fileHash?: string;
            /** Format: int32 */
            loadAttempts?: number;
            /** Format: int32 */
            numberOfTerms?: number;
            /** Format: int32 */
            numberOfProperties?: number;
            /** Format: int32 */
            numberOfIndividuals?: number;
            config?: components['schemas']['V1OntologyConfig'];
            baseUris?: string[];
            links?: components['schemas']['Link'][];
        };
        EntityModelV1Term: {
            iri?: string;
            lang?: string;
            description?: string[];
            synonyms?: string[];
            annotation?: {
                [key: string]: Record<string, never>;
            };
            label?: string;
            ontology_name?: string;
            ontology_prefix?: string;
            ontology_iri?: string;
            is_obsolete?: boolean;
            term_replaced_by?: string;
            is_defining_ontology?: boolean;
            has_children?: boolean;
            is_root?: boolean;
            short_form?: string;
            obo_id?: string;
            in_subset?: string[];
            obo_definition_citation?: components['schemas']['V1OboDefinitionCitation'][];
            obo_xref?: components['schemas']['V1OboXref'][];
            obo_synonym?: components['schemas']['V1OboSynonym'][];
            is_preferred_root?: boolean;
            links?: components['schemas']['Link'][];
        };
        PagedModelV1Individual: {
            links?: components['schemas']['Link'][];
            content?: components['schemas']['V1Individual'][];
            page?: components['schemas']['PageMetadata'];
        };
        V1Individual: {
            iri?: string;
            lang?: string;
            description?: string[];
            synonyms?: string[];
            annotation?: {
                [key: string]: Record<string, never>;
            };
            type?: components['schemas']['V1Term'][];
            label?: string;
            ontology_name?: string;
            ontology_prefix?: string;
            ontology_iri?: string;
            is_obsolete?: boolean;
            is_defining_ontology?: boolean;
            has_children?: boolean;
            is_root?: boolean;
            short_form?: string;
            obo_id?: string;
            in_subset?: string[];
        };
        TreeNodeV1Term: {
            children?: components['schemas']['TreeNodeV1Term'][];
            related?: components['schemas']['TreeNodeV1Term'][];
            parent?: components['schemas']['TreeNodeV1Term'][];
            index?: string;
            data?: components['schemas']['V1Term'];
            root?: boolean;
            leaf?: boolean;
        };
        EntityModelV1Property: {
            iri?: string;
            lang?: string;
            description?: string[];
            synonyms?: string[];
            annotation?: {
                [key: string]: Record<string, never>;
            };
            label?: string;
            ontology_name?: string;
            ontology_prefix?: string;
            ontology_iri?: string;
            is_obsolete?: boolean;
            is_defining_ontology?: boolean;
            has_children?: boolean;
            is_root?: boolean;
            short_form?: string;
            obo_id?: string;
            links?: components['schemas']['Link'][];
        };
        EntityModelV1Individual: {
            iri?: string;
            lang?: string;
            description?: string[];
            synonyms?: string[];
            annotation?: {
                [key: string]: Record<string, never>;
            };
            type?: components['schemas']['V1Term'][];
            label?: string;
            ontology_name?: string;
            ontology_prefix?: string;
            ontology_iri?: string;
            is_obsolete?: boolean;
            is_defining_ontology?: boolean;
            has_children?: boolean;
            is_root?: boolean;
            short_form?: string;
            obo_id?: string;
            in_subset?: string[];
            links?: components['schemas']['Link'][];
        };
        ErrorResponse: {
            /** Format: int32 */
            status?: number;
            message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getList: {
        parameters: {
            query?: {
                url?: string;
                dateTimeFrom?: string;
                dateTimeTo?: string;
                intersection?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RestCallParameter'][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelRestCallDto'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTotalCount: {
        parameters: {
            query?: {
                url?: string;
                dateTimeFrom?: string;
                dateTimeTo?: string;
                intersection?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RestCallParameter'][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['KeyValueResultDto'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatisticsByUrl: {
        parameters: {
            query?: {
                url?: string;
                dateTimeFrom?: string;
                dateTimeTo?: string;
                intersection?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RestCallParameter'][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelKeyValueResultDto'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatisticsByParameter: {
        parameters: {
            query?: {
                /** @description Parameter type */
                type?: 'PATH' | 'QUERY' | 'HEADER';
                url?: string;
                /** @description Parameter name */
                parameter?: string;
                dateTimeFrom?: string;
                dateTimeTo?: string;
                intersection?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RestCallParameter'][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelKeyValueResultDto'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatisticsByDate: {
        parameters: {
            query?: {
                /** @description Parameter type */
                type?: 'PATH' | 'QUERY' | 'HEADER';
                url?: string;
                /** @description Parameter name */
                parameter?: string;
                dateTimeFrom?: string;
                dateTimeTo?: string;
                intersection?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RestCallParameter'][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelKeyValueResultDto'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatistics: {
        parameters: {
            query?: {
                schema?: string[];
                classification?: string[];
                /** @description Set to true (default setting is false) for intersection (default behavior is union) of classifications. */
                ontologyIds?: string[];
                exclusive?: boolean;
                /** @description Use License option to filter based on license.label, license.logo and license.url variables. Use Composite Option to filter based on the objects (i.e. collection, subject) within the classifications variable. Use Linear option to filter based on String and Collection<String> based variables. */
                option?: 'COMPOSITE' | 'LINEAR' | 'LICENSE';
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Statistics'];
                    'application/hal+json': components['schemas']['V2Statistics'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatistics_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Statistics'];
                    'application/hal+json': components['schemas']['V2Statistics'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProperties: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    [key: string]: string[];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOntologies: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    [key: string]: string[];
                };
                schema?: string[];
                classification?: string[];
                ontology?: string[];
                /** @description Set to true (default setting is false) for intersection (default behavior is union) of classifications. */
                exclusive?: boolean;
                /** @description Use License option to filter based on license.label, license.logo and license.url variables. Use Composite Option to filter based on the objects (i.e. collection, subject) within the classifications variable. Use Linear option to filter based on String and Collection<String> based variables. */
                option?: 'COMPOSITE' | 'LINEAR' | 'LICENSE';
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOntology: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSKOSConceptHierarchyByOntologyAndIri: {
        parameters: {
            query: {
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description index value for the root term */
                index: string;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TreeNodeV2Entity'];
                    'application/hal+json': components['schemas']['TreeNodeV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findRelatedConcepts: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV2Entity'];
                    'application/hal+json': components['schemas']['PagedModelV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findRelatedConceptsIndirectly: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Entity'][];
                    'application/hal+json': components['schemas']['V2Entity'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    retrieveImmediateGraph: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                    'application/hal+json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displaySKOSConceptHierarchyByOntologyAndIri: {
        parameters: {
            query: {
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description display related concepts */
                display_related: boolean;
                /** @description index value for the root term */
                index: string;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displayRelatedConcepts: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displayRelatedConceptsIndirectly: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                /** @description Page size to retrieve individuals */
                obsoletes: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSKOSConceptHierarchyByOntology: {
        parameters: {
            query: {
                /** @description infer top concepts by schema (hasTopConcept) or  TopConceptOf property or broader/narrower relationships */
                find_roots: 'SCHEMA' | 'TOPCONCEPTOF_PROPERTY' | 'RELATIONSHIPS';
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description Extract the whole tree with children or only the top concepts */
                with_children: boolean;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TreeNodeV2Entity'][];
                    'application/hal+json': components['schemas']['TreeNodeV2Entity'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displaySKOSConceptHierarchyByOntology: {
        parameters: {
            query: {
                /** @description infer top concepts by schema (hasTopConcept) or  TopConceptOf property or broader/narrower relationships */
                find_roots: 'SCHEMA' | 'TOPCONCEPTOF_PROPERTY' | 'RELATIONSHIPS';
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description Extract the whole tree with children or only the top concepts */
                with_children: boolean;
                /** @description display related concepts */
                display_related: boolean;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProperties_1: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    all?: {
                        [key: string]: string;
                    };
                    empty?: boolean;
                } & {
                    [key: string]: string[];
                };
            };
            header?: never;
            path: {
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProperty: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                property: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getChildrenByOntology: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                property: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAncestorsByOntology: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                property: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIndividuals: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    all?: {
                        [key: string]: string;
                    };
                    empty?: boolean;
                } & {
                    [key: string]: string[];
                };
            };
            header?: never;
            path: {
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                    'application/hal+json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIndividual: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                individual: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Entity'];
                    'application/hal+json': components['schemas']['V2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIndividualAncestorsByOntology: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                individual: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTerms: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                facetFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    all?: {
                        [key: string]: string;
                    };
                    empty?: boolean;
                } & {
                    [key: string]: string[];
                };
            };
            header?: never;
            path: {
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEntity: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                entity: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getClasses: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    all?: {
                        [key: string]: string;
                    };
                    empty?: boolean;
                } & {
                    [key: string]: string[];
                };
            };
            header?: never;
            path: {
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getClass: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getClassIndividuals: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHierarchicalChildrenByOntology: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHierarchicalAncestorsByOntology: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getChildrenByOntology_1: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAncestorsByOntology_1: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
            };
            header?: never;
            path: {
                onto: string;
                class: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filterValues: {
        parameters: {
            query: {
                schema: string[];
                pageable: components['schemas']['Pageable'];
                lang?: string;
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageString'];
                    'application/hal+json': components['schemas']['PageString'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filterKeys: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageString'];
                    'application/hal+json': components['schemas']['PageString'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIndividuals_1: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    all?: {
                        [key: string]: string;
                    };
                    empty?: boolean;
                } & {
                    [key: string]: string[];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                    'application/hal+json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEntities: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                facetFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    all?: {
                        [key: string]: string;
                    };
                    empty?: boolean;
                } & {
                    [key: string]: string[];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getClasses_1: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                search?: string;
                searchFields?: string;
                boostFields?: string;
                exactMatch?: boolean;
                includeObsoleteEntities?: boolean;
                searchProperties: {
                    all?: {
                        [key: string]: string;
                    };
                    empty?: boolean;
                } & {
                    [key: string]: string[];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V2PagedAndFacetedResponseV2Entity'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatisticsBySchema: {
        parameters: {
            query?: {
                schema?: string[];
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        empty?: boolean;
                    } & {
                        [key: string]: Record<string, never>;
                    };
                    'application/hal+json': {
                        empty?: boolean;
                    } & {
                        [key: string]: Record<string, never>;
                    };
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiReponse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTerms_1: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTermsByIri: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTermsByIdAndIsDefiningOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTermsByIdAndIsDefiningOntology_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    suggest: {
        parameters: {
            query: {
                q: string;
                schema?: string[];
                classification?: string[];
                ontology?: string[];
                /** @description Set to true (default setting is false) for intersection (default behavior is union) of classifications. */
                exclusive?: boolean;
                /** @description Use License option to filter based on license.label, license.logo and license.url variables. Use Composite Option to filter based on the objects (i.e. collection, subject) within the classifications variable. Use Linear option to filter based on String and Collection<String> based variables. */
                option?: 'COMPOSITE' | 'LINEAR' | 'LICENSE';
                rows?: number;
                start?: number;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    select: {
        parameters: {
            query: {
                /**
                 * @description The terms to search. By default the search is performed over term labels, synonyms, descriptions, identifiers and annotation properties.
                 * @example disease or liver+disease
                 */
                q: string;
                schema?: string[];
                classification?: string[];
                /**
                 * @description Restrict a search to a set of ontologies e.g. ontology=efo,bfo
                 * @example efo,bfo
                 */
                ontology?: string[];
                /** @description Set to true (default setting is false) for intersection (default behavior is union) of classifications. */
                exclusive?: boolean;
                /** @description Use License option to filter based on license.label, license.logo and license.url variables. Use Composite Option to filter based on the objects (i.e. collection, subject) within the classifications variable. Use Linear option to filter based on String and Collection<String> based variables. */
                option?: 'COMPOSITE' | 'LINEAR' | 'LICENSE';
                /**
                 * @description Restrict a search to an entity type, one of {class,property,individual,ontology}
                 * @example class,property
                 */
                type?: string[];
                /** @description Restrict a search to an particular set of slims by name */
                slim?: string[];
                /**
                 * @description Specifcy the fields to return, the defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}
                 * @example iri,label,short_form,obo_id,ontology_name
                 */
                fieldList?: string[];
                /**
                 * @description Set to true to include obsoleted terms in the results
                 * @example false
                 */
                obsoletes?: boolean;
                /**
                 * @description Set to true to only return terms that are in a defining ontology e.g. Only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced
                 * @example false
                 */
                local?: boolean;
                /**
                 * @description You can restrict a search to children of a given term. Supply a list of IRI for the terms that you want to search under
                 * @example http://www.ebi.ac.uk/efo/EFO_0001421, http://www.ebi.ac.uk/efo/EFO_0004228
                 */
                childrenOf?: string[];
                /**
                 * @description You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')
                 * @example http://www.ebi.ac.uk/efo/EFO_0001421, http://www.ebi.ac.uk/efo/EFO_0004228
                 */
                allChildrenOf?: string[];
                rows?: number;
                start?: number;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search: {
        parameters: {
            query: {
                /**
                 * @description The terms to search. By default the search is performed over term labels, synonyms, descriptions, identifiers and annotation properties.
                 * @example disease or liver+disease
                 */
                q: string;
                schema?: string[];
                classification?: string[];
                /**
                 * @description Restrict a search to a set of ontologies e.g. ontology=efo,bfo
                 * @example efo,bfo
                 */
                ontology?: string[];
                /** @description Set to true (default setting is false) for intersection (default behavior is union) of classifications. */
                exclusive?: boolean;
                /** @description Use License option to filter based on license.label, license.logo and license.url variables. Use Composite Option to filter based on the objects (i.e. collection, subject) within the classifications variable. Use Linear option to filter based on String and Collection<String> based variables. */
                option?: 'COMPOSITE' | 'LINEAR' | 'LICENSE';
                /**
                 * @description Restrict a search to an entity type, one of {class,property,individual,ontology}
                 * @example class,property
                 */
                type?: string[];
                /** @description Restrict a search to an particular set of slims by name */
                slim?: string[];
                /**
                 * @description Specifcy the fields to return, the defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}
                 * @example iri,label,short_form,obo_id,ontology_name
                 */
                fieldList?: string[];
                /**
                 * @description Specify the fields to query, the defaults are {label, synonym, description, short_form, obo_id, annotations, logical_description, iri}
                 * @example iri,label,short_form,ontology_name
                 */
                queryFields?: string[];
                /**
                 * @description Set to true for exact matches
                 * @example false
                 */
                exact?: boolean;
                /**
                 * @description Group results by unique id (IRI)
                 * @example http://www.ebi.ac.uk/efo/EFO_0001421
                 */
                groupField?: string;
                /**
                 * @description Set to true to include obsoleted terms in the results
                 * @example false
                 */
                obsoletes?: boolean;
                /**
                 * @description Set to true to only return terms that are in a defining ontology e.g. Only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced
                 * @example false
                 */
                local?: boolean;
                /**
                 * @description You can restrict a search to children of a given term. Supply a list of IRI for the terms that you want to search under
                 * @example http://www.ebi.ac.uk/efo/EFO_0001421, http://www.ebi.ac.uk/efo/EFO_0004228
                 */
                childrenOf?: string[];
                /**
                 * @description You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')
                 * @example http://www.ebi.ac.uk/efo/EFO_0001421, http://www.ebi.ac.uk/efo/EFO_0004228
                 */
                allChildrenOf?: string[];
                inclusive?: boolean;
                isLeaf?: boolean;
                rows?: number;
                start?: number;
                /** @description You can select the format you want the response in. Default is `json` but you can select xml, csv etc. Full list of acceptable value can be found here: https://solr.apache.org/guide/solr/latest/query-guide/response-writers.html */
                format?: string;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllProperties: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the property, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the property.
                 * @example DUO_0000041
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the property.
                 * @example DUO:0000041
                 */
                obo_id?: string;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPropertiesByIri: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The IRI of the property, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPropertiesByIdAndIsDefiningOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the property, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the property.
                 * @example DUO_0000041
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the property.
                 * @example DUO:0000041
                 */
                obo_id?: string;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPropertiesByIriAndIsDefiningOntology: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The IRI of the property, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOntologies_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Ontology'];
                    'application/hal+json': components['schemas']['PagedModelV1Ontology'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOntology_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EntityModelV1Ontology'];
                    'application/hal+json': components['schemas']['EntityModelV1Ontology'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termsByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                obsoletes?: boolean;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTerm: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EntityModelV1Term'];
                    'application/hal+json': components['schemas']['EntityModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    related: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded.
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
                /**
                 * @description The IRI of the property, this must be double URL encoded.
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                property_iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSuperClasses: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be single URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelatedFrom: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be single URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getParents: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    graphJsTree: {
        parameters: {
            query?: {
                lang?: string;
                siblings?: boolean;
                viewMode?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                    'application/hal+json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    graphJsTreeChildren: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FBFO_0000051
                 */
                iri: string;
                /**
                 * @description This is the id of the node in the jstree of ontology specified by {onto} parameter
                 * @example aHR0cDovL3B1cmwub2JvbGlicmFyeS5vcmcvb2JvL0JGT18wMDAwMDUx
                 */
                nodeid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getJson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be single URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                    'application/hal+json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInstances: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be single URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Individual'];
                    'application/hal+json': components['schemas']['PagedModelV1Individual'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHierarchicalParents: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHierarchicalDescendants: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHierarchicalChildren: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHierarchicalAncestors: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    graphJson: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEquivalentClasses: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be single URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    descendants: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    children: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ancestors: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRoots: {
        parameters: {
            query?: {
                obsoletes?: boolean;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPreferredRoots: {
        parameters: {
            query?: {
                includeObsoletes?: boolean;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSKOSConceptHierarchyByOntologyAndIri_1: {
        parameters: {
            query: {
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description index value for the root term */
                index: string;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TreeNodeV1Term'];
                    'application/hal+json': components['schemas']['TreeNodeV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findRelatedConcepts_1: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findRelatedConceptsIndirectly_1: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['V1Term'][];
                    'application/hal+json': components['schemas']['V1Term'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    retrieveImmediateGraph_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                    'application/hal+json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displaySKOSConceptHierarchyByOntologyAndIri_1: {
        parameters: {
            query: {
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description display related concepts */
                display_related: boolean;
                /** @description index value for the root term */
                index: string;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displayRelatedConcepts_1: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displayRelatedConceptsIndirectly_1: {
        parameters: {
            query: {
                /** @description skos based concept relation type */
                relation_type: 'broader' | 'narrower' | 'related';
                /** @description Page size to retrieve individuals */
                obsoletes: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
                /** @description encoded concept IRI */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSKOSConceptHierarchyByOntology_1: {
        parameters: {
            query: {
                /** @description infer top concepts by schema (hasTopConcept) or  TopConceptOf property or broader/narrower relationships */
                find_roots: 'SCHEMA' | 'TOPCONCEPTOF_PROPERTY' | 'RELATIONSHIPS';
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description Extract the whole tree with children or only the top concepts */
                with_children: boolean;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TreeNodeV1Term'][];
                    'application/hal+json': components['schemas']['TreeNodeV1Term'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    displaySKOSConceptHierarchyByOntology_1: {
        parameters: {
            query: {
                /** @description infer top concepts by schema (hasTopConcept) or  TopConceptOf property or broader/narrower relationships */
                find_roots: 'SCHEMA' | 'TOPCONCEPTOF_PROPERTY' | 'RELATIONSHIPS';
                /** @description infer from narrower or broader relationships */
                narrower: boolean;
                /** @description Extract the whole tree with children or only the top concepts */
                with_children: boolean;
                /** @description display related concepts */
                display_related: boolean;
                obsoletes?: boolean;
                lang?: string;
                pageable: components['schemas']['Pageable'];
            };
            header?: never;
            path: {
                /** @description ontology ID */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllPropertiesByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the property, it should exist in the specified ontology by {onto} param.
                 * @example DUO_0000041
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the property, it should exist in the specified ontology by {onto} param.
                 * @example DUO:0000041
                 */
                obo_id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProperty_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EntityModelV1Property'];
                    'application/hal+json': components['schemas']['EntityModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getParents_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getJsTree: {
        parameters: {
            query?: {
                siblings?: boolean;
                viewMode?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                    'application/hal+json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    graphJsTreeChildren_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FBFO_0000051
                 */
                iri: string;
                /**
                 * @description This is the id of the node in the jstree of ontology specified by {onto} parameter
                 * @example aHR0cDovL3B1cmwub2JvbGlicmFyeS5vcmcvb2JvL0JGT18wMDAwMDUx
                 */
                nodeid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    descendants_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    children_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ancestors_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
                /**
                 * @description The IRI of the property, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000041
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRoots_1: {
        parameters: {
            query?: {
                /**
                 * @description A boolean flag to get Obsolete terms
                 * @example true
                 */
                obsoletes?: boolean;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termParentsByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllIndividualsByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the individual, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000103
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the individual, it should exist in the specified ontology by {onto} param.
                 * @example IAO_0000124
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the individual, it should exist in the specified ontology by {onto} param.
                 * @example IAO:0000124
                 */
                obo_id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Information Artifact Ontology, the ID is iao.
                 * @example iao
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Individual'];
                    'application/hal+json': components['schemas']['PagedModelV1Individual'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIndividual_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Information Artifact Ontology, the ID is iao.
                 * @example iao
                 */
                onto: string;
                /**
                 * @description The IRI of the individual, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000103
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EntityModelV1Individual'];
                    'application/hal+json': components['schemas']['EntityModelV1Individual'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDirectTypes: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Information Artifact Ontology, the ID is iao.
                 * @example iao
                 */
                onto: string;
                /**
                 * @description The IRI of the individual, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000103
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getJsTree_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Information Artifact Ontology, the ID is iao.
                 * @example iao
                 */
                onto: string;
                /**
                 * @description The IRI of the individual, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000103
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ancestors_2: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Information Artifact Ontology, the ID is iao.
                 * @example iao
                 */
                onto: string;
                /**
                 * @description The IRI of the individual, this IRI should exist in the specified ontology by {onto} param. This value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000103
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Property'];
                    'application/hal+json': components['schemas']['PagedModelV1Property'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termHierarchicalDescendantsByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termHierarchicalChildrenByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termHierarchicalAncestorsByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termDescendantsByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termChildrenByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    termAncestorsByOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the term, this value must be double URL encoded
                 * @example http%3A%2F%2Fpurl.obolibrary.org%2Fobo%2FDUO_0000017
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the term.
                 * @example DUO_0000017
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the term.
                 * @example DUO:0000017
                 */
                obo_id?: string;
                /** @description This can be any of the above i.e. iri, short_form or obo_id. */
                id?: string;
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the ontology. For example for Data Use Ontology, the ID is duo.
                 * @example duo
                 */
                onto: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Term'];
                    'application/hal+json': components['schemas']['PagedModelV1Term'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filterValues_1: {
        parameters: {
            query: {
                schema: string[];
                pageable: components['schemas']['Pageable'];
                lang?: string;
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageString'];
                    'application/hal+json': components['schemas']['PageString'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filterKeys_1: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable'];
                lang?: string;
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageString'];
                    'application/hal+json': components['schemas']['PageString'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOntologiesByMetadata: {
        parameters: {
            query: {
                schema: string[];
                classification: string[];
                /** @description Set to true (default setting is false) for intersection (default behavior is union) of classifications. */
                exclusive?: boolean;
                /** @description Use License option to filter based on license.label, license.logo and license.url variables. Use Composite Option to filter based on the objects (i.e. collection, subject) within the classifications variable. Use Linear option to filter based on String and Collection<String> based variables. */
                option?: 'COMPOSITE' | 'LINEAR' | 'LICENSE';
                pageable: components['schemas']['Pageable'];
                lang?: string;
                assembler: components['schemas']['PagedResourcesAssembler'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Ontology'];
                    'application/hal+json': components['schemas']['PagedModelV1Ontology'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllIndividuals: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the individual, this value must be double URL encoded
                 * @example http%3A%252F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000124
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the individual.
                 * @example IAO_0000124
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the individual.
                 * @example IAO:0000124
                 */
                obo_id?: string;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Individual'];
                    'application/hal+json': components['schemas']['PagedModelV1Individual'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllIndividuals_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The IRI of the individual, this value must be double URL encoded
                 * @example http%3A%252F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000124
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Individual'];
                    'application/hal+json': components['schemas']['PagedModelV1Individual'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllIndividualsByIdAndIsDefiningOntology: {
        parameters: {
            query?: {
                /**
                 * @description The IRI of the individual, this value must be double URL encoded
                 * @example http%3A%252F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000124
                 */
                iri?: string;
                /**
                 * @description This refers to the short form of the individual.
                 * @example IAO_0000124
                 */
                short_form?: string;
                /**
                 * @description This refers to the OBO ID of the individual.
                 * @example IAO:0000124
                 */
                obo_id?: string;
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Individual'];
                    'application/hal+json': components['schemas']['PagedModelV1Individual'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllIndividualsByIdAndIsDefiningOntology_1: {
        parameters: {
            query?: {
                lang?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The IRI of the individual, this value must be double URL encoded
                 * @example http%3A%252F%2Fpurl.obolibrary.org%2Fobo%2FIAO_0000124
                 */
                iri: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PagedModelV1Individual'];
                    'application/hal+json': components['schemas']['PagedModelV1Individual'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleError_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleError_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleError_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleError_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleError_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleError: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleError_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkHealth_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkHealth_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkHealth_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkHealth_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkHealth_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkHealth_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
